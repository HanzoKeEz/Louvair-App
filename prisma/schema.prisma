generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  content     Json?
  description String
  image       String
  categories  String[]
  published   Boolean  @default(false)
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @default(now()) @map(name: "updated_at")
  authorId    String

  author User @relation(fields: [authorId], references: [id])
}

model User {
  id                     String          @id @default(cuid())
  name                   String?
  email                  String?         @unique
  emailVerified          DateTime?
  image                  String?
  username               String?         @unique
  created_at             DateTime        @default(now())
  updated_at             DateTime        @updatedAt
  phone                  String?         @unique @default("")
  birthdate              String?
  cart                   Cart?
  wishlist               Product[]       @relation("Wishlist")
  payments               Payment[]
  productReviews         ProductReview[]
  notifications          Notification[]
  errors                 Error[]
  files                  File[]
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  accounts               Account[]
  sessions               Session[]
  stripeCustomerId       String?
  stripeSubscriptionId   String?
  stripePriceId          String?
  stripeCurrentPeriodEnd DateTime?
  orders                 Order[]
  Address                Address[]
  Post                   Post[]
}

model Cart {
  user   User       @relation(fields: [userId], references: [id])
  userId String     @id
  items  CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  cart      Cart    @relation(fields: [cartId], references: [userId])
  cartId    String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  count     Int

  @@unique([cartId, productId], name: "UniqueCartItem")
}

model Brand {
  id          String  @id @default(cuid())
  title       String  @unique
  description String?
  logo        String?

  products Product[]
}

model Order {
  id              String    @id @default(cuid())
  user            User      @relation(fields: [userId], references: [id])
  userId          String
  amount          Float
  currency        String
  createdDate     DateTime  @default(now())
  paymentIntentID String?   @unique
  products        Product[]
  number          Int       @unique @default(autoincrement())
  status          String
  total           Float     @default(100)
  shipping        Float     @default(100)
  payable         Float     @default(100)
  tax             Float     @default(100)
  discount        Float     @default(0)

  isPaid      Boolean @default(false)
  isCompleted Boolean @default(false)

  payments   Payment[]
  orderItems OrderItem[]
  refund     Refund?

  discountCode   DiscountCode? @relation(fields: [discountCodeId], references: [id])
  discountCodeId String?
  address        Address?      @relation(fields: [addressId], references: [id])
  addressId      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([addressId])
  @@index([discountCodeId])
}

model Product {
  id             String          @id @default(cuid())
  name           String
  description    String?
  unit_amount    Float
  image          String?
  quantity       Float           @default(0)
  orders         Order[]
  cartItems      CartItem[]
  wishlists      User[]          @relation("Wishlist")
  productReviews ProductReview[]
  keywords       String[]
  title          String
  price          Float           @default(100)
  discount       Float           @default(0)
  stock          Int             @default(0)
  images         String[]
  metadata       Json?

  isAvailable Boolean @default(true)
  isFeatured  Boolean @default(false)

  categories Category[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  brand     Brand       @relation(fields: [brandId], references: [id])
  brandId   String
  OrderItem OrderItem[]

  @@index([brandId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id          String  @id @default(cuid())
  title       String  @unique
  description String?

  products Product[]
  banners  Banner[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductReview {
  id     String @id @default(cuid())
  text   String
  rating Int

  product   Product @relation(fields: [productId], references: [id])
  productId String
  user      User    @relation(fields: [userId], references: [id])
  userId    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, userId], name: "UniqueProductProductReview")
  @@index([userId])
  @@index([productId])
}

model OrderItem {
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  count     Int
  price     Float
  discount  Float

  @@unique([orderId, productId], name: "UniqueOrderItem")
}

model Address {
  id         String @id @default(cuid())
  country    String @default("US")
  address    String
  city       String
  phone      String
  postalCode String

  user   User    @relation(fields: [userId], references: [id])
  userId String
  orders Order[]

  createdAt DateTime @default(now())

  @@index([userId])
}

model Notification {
  id      String  @id @default(cuid())
  content String
  isRead  Boolean @default(false)

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model DiscountCode {
  id                String   @id @default(cuid())
  code              String   @unique
  stock             Int      @default(1)
  description       String?
  percent           Int
  maxDiscountAmount Float    @default(1)
  startDate         DateTime
  endDate           DateTime

  order Order[]

  createdAt DateTime @default(now())
}

model Refund {
  id     String @id @default(cuid())
  amount Float
  reason String

  order   Order  @relation(fields: [orderId], references: [id])
  orderId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
}

model Payment {
  id       String  @id @default(cuid())
  number   Int     @unique @default(autoincrement())
  status   String
  refId    String  @unique
  cardPan  String?
  cardHash String?
  fee      Float?

  isSuccessful Boolean @default(false)
  payable      Float

  provider   PaymentProvider @relation(fields: [providerId], references: [id])
  providerId String
  user       User            @relation(fields: [userId], references: [id])
  userId     String
  order      Order           @relation(fields: [orderId], references: [id])
  orderId    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([providerId])
  @@index([orderId])
}

model PaymentProvider {
  id          String  @id @default(cuid())
  title       String  @unique
  description String?
  websiteUrl  String?
  isActive    Boolean @default(false)

  orders Payment[]
}

model Error {
  id String @id @default(cuid())

  error String

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  createdAt DateTime @default(now())

  @@index([userId])
}

model File {
  id String @id @default(cuid())

  url String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())

  @@index([userId])
}

model Blog {
  slug        String  @id
  title       String
  image       String
  description String
  content     String? @db.Text

  categories String[]
  keywords   String[]

  author   Author @relation(fields: [authorId], references: [id])
  authorId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([authorId])
}

model Banner {
  id String @id @default(cuid())

  label String
  image String

  categories Category[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Author {
  id     String  @id @default(cuid())
  email  String  @unique
  phone  String? @unique
  name   String?
  avatar String?
  OTP    String?

  blogs Blog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
